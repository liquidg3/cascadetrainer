{
  "name": "opencv",
  "description": "Node Bindings to OpenCV",
  "author": {
    "name": "Peter Braden",
    "email": "peterbraden@peterbraden.co.uk"
  },
  "dependencies": {
    "buffers": "0.1.1"
  },
  "version": "0.4.0",
  "devDependencies": {
    "vows": "*"
  },
  "engines": {
    "node": ">=0.4.1"
  },
  "license": "MIT",
  "scripts": {
    "preinstall": "node-gyp clean rebuild",
    "test": "vows test/unit.js"
  },
  "keywords": [
    "opencv",
    "computer",
    "vision",
    "quadrocopter"
  ],
  "main": "./lib/opencv",
  "repository": {
    "type": "git",
    "url": "https://github.com/peterbraden/node-opencv.git"
  },
  "readme": "# node-opencv \n\n[![Build Status](https://secure.travis-ci.org/peterbraden/node-opencv.png)](http://travis-ci.org/peterbraden/node-opencv)\n\n\n[OpenCV](http://opencv.willowgarage.com/wiki/) bindings for Node.js. OpenCV is the defacto computer vision library - by interfacing with it natively in node, we get powerful real time vision in js.\n\nPeople are using node-opencv to fly control quadrocoptors, detect faces from webcam images and annotate video streams. If you're using it for something cool, I'd love to hear about it!\n\n## Install\n\nYou'll need OpenCV 2.3.1 installed.\n\nThen:\n\n```bash\n$ npm install opencv\n```\n\nOr to build the repo:\n\n```bash\n$ node-gyp rebuild\n```\n\n## Examples\n\n### Face Detection\n\n```javascript\ncv.readImage(\"./examples/test.jpg\", function(err, im){\n  im.detectObject(cv.FACE_CASCADE, {}, function(err, faces){\n    for (var i=0;i<faces.length; i++){\n      var x = faces[i]\n      im.ellipse(x.x + x.width/2, x.y + x.height/2, x.width/2, x.height/2);\n    }\n    im.save('./out.jpg');\n  });\n})\n```\n\n\n## API Documentation\n\n### Matrix\n\nThe [matrix](http://opencv.jp/opencv-2svn_org/cpp/core_basic_structures.html#mat) is the most useful\nbase datastructure in OpenCV. Things like images are just matrices of pixels.\n\n#### Creation\n\n```javascript\nnew Matrix(rows, cols)\n```\n\nOr if you're thinking of a Matrix as an image:\n\n```javascript\nnew Matrix(height, width)\n```\n\nOr you can use opencv to read in image files. Supported formats are in the OpenCV docs, but jpgs etc are supported.\n\n```javascript\ncv.readImage(filename, function(mat){\n  ...\n})\n\ncv.readImage(buffer, function(mat){\n  ...\n})\n```\n\nIf you need to pipe data into an image, you can use an ImageDataStream:\n\n```javascript\nvar s = new cv.ImageDataStream()\n\ns.on('load', function(matrix){\n  ...\n})\n\nfs.createReadStream('./examples/test.jpg').pipe(s);\n```\n\nIf however, you have a series of images, and you wish to stream them into a\nstream of Matrices, you can use an ImageStream. Thus:\n\n```javascript\nvar s = new cv.ImageStream()\n\ns.on('data', function(matrix){\n   ...\n})\n\nardrone.createPngStream().pipe(s);\n```\n\nNote: Each 'data' event into the ImageStream should be a complete image buffer.\n\n\n\n#### Accessing Data\n\n```javascript\nvar mat = new cv.Matrix.Eye(4,4); // Create identity matrix\n\nmat.get(0,0) // 1\n\nmat.row(0)  // [1,0,0,0]\nmat.col(4)  // [0,0,0,1]\n```\n\n##### Save\n\n```javascript\nmat.save('./pic.jpg')\n```\n\nor:\n\n```javascript\nvar buff = mat.toBuffer()\n```\n\n#### Image Processing\n\n```javascript\nim.convertGrayscale()\nim.canny(5, 300)\nim.houghLinesP()\n```\n\n\n#### Simple Drawing\n\n```javascript\nim.ellipse(x, y)\nim.line([x1,y1], [x2, y2])\n```\n\n#### Object Detection\n\nThere is a shortcut method for \n[Viola-Jones Haar Cascade](http://www.cognotics.com/opencv/servo_2007_series/part_2/sidebar.html) object \ndetection. This can be used for face detection etc.\n\n```javascript\nmat.detectObject(haar_cascade_xml, opts, function(err, matches){})\n```\n\nFor convenience in face recognition, cv.FACE_CASCADE is a cascade that can be used for frontal face recognition.\n\nAlso:\n\n```javascript\nmat.goodFeaturesToTrack\n```\n\n#### Contours\n\n```javascript\nmat.findCountours\nmat.drawContour\nmat.drawAllContours\n```\n\n### Using Contours\n\n`findContours` returns a `Contours` collection object, not a native array. This object provides\nfunctions for accessing, computing with, and altering the contours contained in it.\nSee [relevant source code](src/Contours.cc) and [examples](examples/)\n\n```javascript\nvar contours = im.findContours;\n\n# Count of contours in the Contours object\ncontours.size();\n\n# Count of corners(verticies) of contour `index`\ncontours.cornerCount(index);\n\n# Access vertex data of contours\nfor(var c = 0; c < contours.size(); ++c) {\n  console.log(\"Contour \" + c);\n  for(var i = 0; i < contours.cornerCount(c); ++i) {\n    var point = contours.point(c, i);\n    console.log(\"(\" + point.x + \",\" + point.y + \")\");\"\n  }\n}\n\n# Computations of contour `index`\ncontours.area(index);\ncontours.arcLength(index, isClosed);\ncontours.boundingRect(index);\ncontours.minAreaRect(index);\ncontours.isConvex(index);\n\n# Destructively alter contour `index`\ncontours.approxPolyDP(index, epsilon, isClosed);\ncontours.convexHull(index, clockwise);\n```\n\n## MIT License\nThe library is distributed under the MIT License - if for some reason that \ndoesn't work for you please get in touch.\n\n## Changelog\n\n#### 0.0.13\n\n- V Early support for face recognition - API is _likely_ to change. Have fun!\n- *API Change*: VideoCapture.read now calls callback(err, im) instead of callback(im)\n\n#### 0.0.12\n- Matrix clone()\n- NamedWindow Support\n\n#### 0.0.11\n\n- Bug Fixes\n- ImageStream becomes ImageDataStream, and new ImageStream allows multiple images to be\nstreamed as matrices, for example, with an object detection stream.\n- @ryansouza improved documentation\n- Correcting matrix constructor (thanks @gluxon)\n- @Michael Smith expanded Contours functionality.\n\nThanks all!\n\n#### 0.0.10\n\n- Bug Fixes\n- @Contra added code that allows thickness and color args for ellipse\n- Camshift Support\n- @jtlebi added bindings for erode, gaussianBlur, arcLength, approxPolyDP, isConvex, cornerCount\n- @gluxon added bindings for inRange\n\nThanks everyone!\n\n#### 0.0.9\n\n- toBuffer can now take a callback and be run async (re #21)\n",
  "_id": "opencv@0.4.0",
  "dist": {
    "shasum": "fb75dbffa5f4345bba94b9ca6f46ffa9ddb6b691"
  },
  "_from": "opencv@0.4.0"
}
